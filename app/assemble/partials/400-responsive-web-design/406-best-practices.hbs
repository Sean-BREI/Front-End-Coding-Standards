---
title: "Responsive Design Best Practices"
section: true
weight: 506 # increase or decrease to change order of sections
options:
- end-with-rule: false # true
- level: 2 # 2, 3, 4, 5
published: true
---
{{#markdown}}
RWD is frequently said to be achieved through the use of:

1. Percentage-based grids,
2. flexible images that scale,
3. and **CSS media queries.**

These are the core ideas behind RWD, though other techniques are often employed as the term grows in popularity and the use cases evolve.

Like all programming and creative processes there is flexibility in how you go about achieving these, so long as there is consistency within your team.

Some core guidelines:

* Always design and develop the mobile UX first (thus start with small defaults and scale upwards; please see Mobile First)
* Set the baseline Media Queries as a team for various types of devices, and try to stick to them as much as possible.
* Add additional Media Queries — as necessary — for less than ideal experiences at the sizes in between, as appropriate for different types of content and components.
* Build for speed (load time and interaction) and the minimum viable product for slower connection speeds and less able devices.
* Be careful of images. Do not render a 5GB image at 100px by 100px. This does not change the bandwidth needed to download the file! Similarly if you are hiding an image with display: none, visibility: hidden or similar, the image may still be downloaded.
* Test on real hardware. Actual testing on actual devices cannot be substituted with resizing a browser window, or even an "emulation" mode offered by a desktop browser.
* A mobile browser is not a small desktop browser. Mobile versions of desktop browsers are frequently woefully different (or a totally different product) than their desktop counterparts, so do not assume that just because it works on Chrome desktop that it will work on an Android device.

Initial work, and first pass tests of media queries, may be performed in desktop browsers by resizing the screen or using a browser's developer tools that may feature an emulation mode (e.g. Chrome DevTools).

However, this is never a substitution for actual testing on actual devices with various Operating System versions.
{{/markdown}}
