---
title: "Media Queries and CSS Breakpoints"
section: true
weight: 507 # increase or decrease to change order of sections
options:
- end-with-rule: false # true
- level: 3 # 2, 3, 4, 5
published: true
---
{{#markdown}}
Added as part of the CSS3 specification, **media queries** consist of a media type and at least one expression of a media feature (such as height, width and orientation) that describe the conditions under which a set of CSS rules apply.

For example:
{{/markdown}}
{{#code "css"}}
@media screen (min-width: 300px) and (max-width: 800px) {
  .some-selector{
    /* CSS declarations go here */
  }
}
{{/code}}
{{#markdown}}
These widths are referred to as breakpoints as they are the point at which layout behavior breaks with the design at the prior size. This is typically screen size, and sometimes other conditions such as pixel density or even screen orientation (e.g. landscape or portrait; although this isn't that useful).

These are applied with CSS Media Queries test the device or browsers current feature set for various conditions and feature support. The most common example is screen size.

The golden rule is:

* Don't specify vendor- or device-specific widths

Let the content and the design dictate the breakpoints.

* For instance, targeting an ipad in portrait or an ipad landscape.
* Popular devices will come and go and even within devices the specifications will change over time.
* Avoid orientation/resolution based specifications in favor of width based ones (remember you are not targeting devices!).

[Media Query Resources](https://bradfrost.github.io/this-is-responsive/resources.html#media-queries)

[A Device Agnostic Approach to Responsive Web Design](http://www.smashingmagazine.com/2012/03/device-agnostic-approach-to-responsive-web-design/) is a great read on responsive techniques that do not favor one device over another, and are driven by content elements.

If you are placing breakpoints every 50-100px you are doing something wrong. While there is not a correct number of breakpoints there must be a balance between the control of the design and a manageable code base.

While working with media queries here are a few things to consider:

* All modern browsers support CSS3 Media Queries (including browsers as far back as the stock Android 2.1 browser)
* IE8 and below do not support Media Queries.
    * [Respond.js](https://github.com/scottjehl/Respond) (and similar JavaScript libraries) can be used to enable support for Media Queries in these older browsers (if needed).
    * Attempting to polyfill Media Query behavior in older browsers is usually not advisable. This is because the JS needed will cause an additional performance hit to the already slow JavaScript and rendering engine.

Instead, you are better off forcing older browsers to experience the site through a desktop experience (optionally tailored specifically for these older browsers).

* This can be done either through feature detection (with the likes of Modernizr) or with IE conditional statements and optionally including additional CSS style sheets.
{{/markdown}}
