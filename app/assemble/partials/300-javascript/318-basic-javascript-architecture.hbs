---
title: "Basic JavaScript Architecture"
section: true
weight: 418 # increase or decrease to change order of sections
options:
- end-with-rule: false # true
- level: 3 # 2, 3, 4, 5
published: true
---
{{#markdown}}
Today it is common for the JavaScript code on a site to be a vast collection of "Modules" brought together by build scripts, dependency tools, or even manually by the developer (not really recommended).

Smaller sites can get away with more simple structures, but for longer term, JavaScript-heavy code bases the following rule is critical:

* For a complex site, never use a single JavaScript file for development, unless it is tiny and serves a very targeted purpose.

This is so that the code is maintainable and scalable. Smaller files are easier to debug, swap in and out, and blocks of code should serve as small a purpose as possible ([single responsibility principle](http://blog.codinghorror.com/curlys-law-do-one-thing/)).

In most simple terms, most sites benefit from a basic structure similar to:

* Global site-wide JavaScript
* Specific modules for specific sections of the site
* Specific modules used for specific purposes / features
* Available vendor libraries

With this in mind, for strict control over the code base it's best to consider:

* What is the central entry point, or the central point of execution? This is to say, what kicks off the JavaScript? This may be a simple jQuery document.ready() or some other mechanism to run the site's code, such as a router.

Having explicit control over the page life-cycle is preferable to having a dozen jQuery `document.ready()` statements all competing for the first chance to execute on a page.

Effectively the application core, it should kick off the rest of the code to run. Typically this has module-management baked in in some way.

**Note:**

One way to control which code runs on a page is through [DOM-based routing](http://paulirish.com/2009/markup-based-unobtrusive-comprehensive-dom-ready-execution/).

Additional considerations:

* How are the modules going to communicate with each other?
* How tightly coupled are the modules in the code base?
* How much JavaScript code would need to be updated if/when the HTML / CSS changes on the project?
* Can individual parts call as few libraries or plugins as indirectly as possible, to facilitate changes later?
* Does the server need to provide the scripts dynamic values for JavaScript?
{{/markdown}}
